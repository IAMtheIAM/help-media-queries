@import 'config';

/*
  Functions
*/
@function strip-unit( $number ) {
  @if type-of( $number ) == 'number' and not unitless( $number ) {
    @return $number / ( $number * 0 + 1 );
  }

  @return $number;
}

@if $use-helper-mediaqueries == true {

  :root {

    &::after {
      position: fixed;
      font-family: -apple-system, BlinkMacSystemFont,"Arial", sans-serif;
      cursor: default;
      user-select: none;
      z-index: 999999;
      bottom: 16px;
      right: 16px;
      font-weight: bold;
      font-size: 11px;
      text-align: left;
      display: inline-block;
      line-height: 1.8;
      box-sizing: border-box;
      padding: 16px 24px;
      border-radius: 4px;
      white-space: pre-wrap;
      text-transform: capitalize;
      transition: all 250ms;
      background-color: #FFF;
      box-shadow: 0 10px 30px rgba( #000, 0.2 );
      color: #212121;

      /*
      Loop through $breakpoints and generate a random text color if $enable-random-color is TRUE
      */
      @if $enable-random-color == true {
        @each $breakpoint in $breakpoints {
          /*
            Extract the $breakpoint value
          */
          $breakpoint: nth( $breakpoint, 2 );

          @media screen and ( min-width: $breakpoint ) {
            color: hsl( random( 361 ) - 250, 50%, 50% );
          }
        }
      }
    }

    /*
      Extract each density value from $densities
    */
    @each $density in $densities {

      $density: nth( $density, 2 );
      $dpi: unquote( 'min-resolution: #{ $density }' );

      @for $i from 1 through length( $breakpoints ) {
        $size-name: nth( nth( $breakpoints, $i ), 1 );
        $size: nth( nth( $breakpoints, $i ), 2 );
        $size-to-px: "#{( $size / ( $size * 0 + 1 ) ) * ( $base-font-size / ( $base-font-size * 0 + 1 ) )}px";

        &::after {
          @media screen and ( $dpi ) {
            content: 'Density: #{ $density }';

            @media ( orientation: portrait ) {
              content: 'Breakpoint:   None \a Density:   #{ $density } ( min ) \a Orientation:   Portrait';
            }

            @media ( orientation: landscape ) {
              content: "Breakpoint:   None \a Density:   #{ $density } \a Orientation:   Landscape";
            }

            @media ( min-width: $size ) {
              content: "Breakpoint:   #{ $size-name } - #{ $size } ( #{ $size-to-px } ) \a Density:   #{ $density } ( min )" !important;

              @media ( orientation: portrait ) {
                content: "Breakpoint:   #{ $size-name } - #{ $size } ( #{ $size-to-px } ) \a Density:   #{ $density } ( min ) \a Orientation:   Portrait" !important;
              }

              @media ( orientation: landscape ) {
                content: "Breakpoint:   #{ $size-name } - #{ $size } ( #{ $size-to-px } ) \a Density:   #{ $density } ( min ) \a Orientation:   Landscape" !important;
              }
            }
          }
        }
      }
    }
  }
}
